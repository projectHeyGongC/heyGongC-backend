name: CI/CD

on:
  pull_request:
    branches: 
      - develop
    types: [closed]

jobs:
  backend-deploy:
    runs-on: ubuntu-latest
    steps:
      # SOURCE 단계 - 저장소 Checkout
      - name: Checkout-source code
        uses: actions/checkout@v3

      # JDK 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
          
      - name: Set Main Yaml
        uses: microsoft/variable-substitution@v1
        with:
          files: ./src/main/resources/config/application-prod.yml
        env:
          spring.datasource.url: ${{ secrets.PROD_DB_URL }}
          spring.datasource.username: ${{ secrets.PROD_DB_USERNAME }}
          spring.datasource.password: ${{ secrets.PROD_DB_PASSWORD }}
          spring.datasource.driver-class-name: ${{ secrets.PROD_DB_DRIVER_NAME }}
          spring.jpa.properties.hibernate.default_schema: ${{ secrets.PROD_DB_DEFAULT_SCHEMA }}
          google.client.id: ${{ secrets.GOOGLE_CLIENT_ID }}
          google.client.secret: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          jwt.secret: ${{ secrets.JWT_SECRET }}
          jwt.access.expiration: ${{ secrets.JWT_ACCESS_EXPIRATION }}
          jwt.refresh.expiration: ${{ secrets.JWT_REFRESH_EXPIRATION }}
          
      - name: Set Test Yaml
        uses: microsoft/variable-substitution@v1
        with:
          files: ./src/test/resources/application-test.yml
        env:
          google.client.id: ${{ secrets.GOOGLE_CLIENT_ID }}
          google.client.secret: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          jwt.secret: ${{ secrets.JWT_SECRET }}
          jwt.access.expiration: ${{ secrets.JWT_ACCESS_EXPIRATION }}
          jwt.refresh.expiration: ${{ secrets.JWT_REFRESH_EXPIRATION }}
      
      # Gradle 실행권한 부여
      - name: Grant execute permission to gradlew
        run: chmod +x ./gradlew

      # Spring boot application 빌드
      - name: Build with gradle
        run: ./gradlew clean build

      # docker image 빌드
      - name: Build docker image
        run: docker build -t hey0c/heygongc-backend:0.0.1 .

      # docker hub 로그인
      - name: Login docker hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # docker hub 푸시
      - name: Push to docker hub
        run: docker push hey0c/heygongc-backend:0.0.1

      # WAS 인스턴스 접속 & 애플리케이션 실행
      - name: Connect to WAS & Execute Application
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.WAS_HOST }}
          username: ${{ secrets.WAS_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.WAS_SSH_PORT }}
          script: |
            # docker image 풀
            sudo docker pull hey0c/heygongc-backend:0.0.1
            # 실행된 컨테이너 중지 + 삭제
            sudo docker ps -a -q | xargs sudo docker stop | xargs sudo docker rm
            # 컨테이너 실행
            sudo docker run -d -p 8080:8080 -v heygongc-backend:/logs --name 'heygongc-backend' hey0c/heygongc-backend:0.0.1
            # 미사용 image 삭제 (태그가 없는 image)
            sudo docker images -f "dangling=true" -q | xargs sudo docker rmi
            
