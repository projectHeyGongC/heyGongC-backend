name: CI/CD

on:
  push:
  pull_request:
    branches:
      - develop

jobs:
  backend-deploy:
    runs-on: ubuntu-latest
    steps:
      # SOURCE 단계 - 저장소 Checkout
      - name: Checkout-source code
        uses: actions/checkout@v3

      # JDK 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
          
      # - name: Set Main Yaml
      #   uses: microsoft/variable-substitution@v1
      #   with:
      #     files: ./src/main/resources/config/application-prod.yml
      #   env:
      #     spring.datasource.url: ${{ secrets.PROD_DB_URL }}
      #     spring.datasource.username: ${{ secrets.PROD_DB_USERNAME }}
      #     spring.datasource.password: ${{ secrets.PROD_DB_PASSWORD }}
      #     spring.datasource.driver-class-name: ${{ secrets.PROD_DB_DRIVER_NAME }}
      #     google.client.id: ${{ secrets.GOOGLE_CLIENT_ID }}
      #     google.client.secret: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      #     jwt.secret: ${{ secrets.JWT_SECRET }}
      #     jwt.access.expiration: ${{ secrets.JWT_ACCESS_EXPIRATION }}
      #     jwt.refresh.expiration: ${{ secrets.JWT_REFRESH_EXPIRATION }}
          
      # - name: Set Test Yaml
      #   uses: microsoft/variable-substitution@v1
      #   with:
      #     files: ./src/test/resources/application-test.yml
      #   env:
      #     google.client.id: ${{ secrets.GOOGLE_CLIENT_ID }}
      #     google.client.secret: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      #     jwt.secret: ${{ secrets.JWT_SECRET }}
      #     jwt.access.expiration: ${{ secrets.JWT_ACCESS_EXPIRATION }}
      #     jwt.refresh.expiration: ${{ secrets.JWT_REFRESH_EXPIRATION }}
      
      # Gradle 실행권한 부여
      - name: Grant execute permission to gradlew
        run: chmod +x ./gradlew

      # Spring boot application 빌드
      - name: Build with gradle
        run: ./gradlew clean build
        env:
          PROD_DB_URL: ${{ secrets.PROD_DB_URL }}
          PROD_DB_USERNAME: ${{ secrets.PROD_DB_USERNAME }}
          PROD_DB_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
          PROD_DB_DRIVER_NAME: ${{ secrets.PROD_DB_DRIVER_NAME }}
          PROD_DB_DEFAULT_SCHEMA: ${{ secrets.PROD_DB_DEFAULT_SCHEMA }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_ACCESS_EXPIRATION: ${{ secrets.JWT_ACCESS_EXPIRATION }}
          JWT_REFRESH_EXPIRATION: ${{ secrets.JWT_REFRESH_EXPIRATION }}

      # docker image 빌드
      - name: Build docker image
        run: docker build -t hey0c/heygongc-backend:0.0.1 .

      # docker hub 로그인
      - name: Login docker hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # docker hub 퍼블리시
      - name: Publish to docker hub
        run: docker push hey0c/heygongc-backend:0.0.1

      # WAS 인스턴스 접속 & 애플리케이션 실행
      - name: Connect to WAS & Execute Application
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.WAS_HOST }}
          username: ${{ secrets.WAS_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.WAS_SSH_PORT }}
          script: |
            docker stop $(docker ps -a -q) 
            docker rm $(docker ps -a -q) 
            docker pull hey0c/heygongc-backend:0.0.1
            docker run -d -p 8080:8080 --name heygongc-backend hey0c/heygongc-backend:0.0.1
